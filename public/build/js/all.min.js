!function(){"use strict";var o=$('<div class="modal-body"><input type="text" class="form-control" placeholder="Message"></div>');$(document).on("click",".js-msgGroup",function(){$(".js-msgGroup, .js-newMsg").addClass("d-none"),$(".js-conversation").removeClass("d-none"),$(".modal-title").html('<a href="#" class="js-gotoMsgs">Back</a>'),o.insertBefore(".js-modalBody")}),$(function(){function o(){return $('[data-toggle="popover"]').length?$(window).width()-($('[data-toggle="popover"]').offset().left+$('[data-toggle="popover"]').outerWidth()):0}$(window).on("resize",function(){var t=$('[data-toggle="popover"]').data("bs.popover");t&&(t.config.viewport.padding=o())}),$('[data-toggle="popover"]').popover({template:'<div class="popover" role="tooltip"><div class="arrow"></div><div class="popover-body popover-content px-0"></div></div>',title:"",html:!0,trigger:"manual",placement:"bottom",viewport:{selector:"body",padding:o()},content:function(){return'<ul class="nav nav-pills nav-stacked flex-column" style="width: 120px">'+$("#js-popoverContent").clone().html()+"</ul>"}}),$('[data-toggle="popover"]').on("click",function(o){o.stopPropagation(),$($('[data-toggle="popover"]').data("bs.popover").getTipElement()).hasClass("in")?($('[data-toggle="popover"]').popover("hide"),$(document).off("click.app.popover")):($('[data-toggle="popover"]').popover("show"),setTimeout(function(){$(document).one("click.app.popover",function(){$('[data-toggle="popover"]').popover("hide")})},1))})}),$(document).on("click",".js-gotoMsgs",function(){o.remove(),$(".js-conversation").addClass("d-none"),$(".js-msgGroup, .js-newMsg").removeClass("d-none"),$(".modal-title").html("Messages")}),$(document).on("click","[data-action=growl]",function(o){o.preventDefault(),$("#app-growl").append('<div class="alert alert-dark alert-dismissible fade show" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>Click the x on the upper right to dismiss this little thing. Or click growl again to show more growls</div>')}),$(document).on("focus",'[data-action="grow"]',function(){$(window).width()>1e3&&$(this).animate({width:300})}),$(document).on("blur",'[data-action="grow"]',function(){$(window).width()>1e3&&$(this).animate({width:180})}),$(function(){function o(){$(window).scrollTop()>$(window).height()?$(".docs-top").fadeIn():$(".docs-top").fadeOut()}$(".docs-top").length&&(o(),$(window).on("scroll",o))}),$(function(){function o(){e.width()>768?function(){function o(){a.containerTop=$(".docs-content").offset().top-40,a.containerRight=$(".docs-content").offset().left+$(".docs-content").width()+45,n()}function n(){var o=e.scrollTop(),n=Math.max(o-a.containerTop,0);return n?void t.css({position:"fixed",left:a.containerRight,top:40}):($(t.find("li a")[1]).addClass("active"),t.css({position:"",left:"",top:""}))}var a={};o(),$(window).on("resize.theme.nav",o).on("scroll.theme.nav",n),$("body").scrollspy({target:"#markdown-toc"}),setTimeout(function(){$("body").scrollspy("refresh")},1e3)}():(e.off("resize.theme.nav"),e.off("scroll.theme.nav"),t.css({position:"",left:"",top:""}))}var t=$("#markdown-toc");$("#markdown-toc li").addClass("nav-item"),$("#markdown-toc li > a").addClass("nav-link"),$("#markdown-toc li > ul").addClass("nav");var e=$(window);t[0]&&(o(),e.on("resize",o))})}();
var router=function(){"use strict";class t{constructor(){}static showView(t){t.forEach(t=>{t.classList.remove("d-none")})}static hideView(t){t.forEach(function(t){t.classList.add("d-none")})}static navigateTo(t){window.location.hash="#"+t}static initTemplate(t,e){let s=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(s)}static modifyDate(t){return new Date(parseInt(t)).toLocaleDateString()}static modifyDateandTime(t){let e=new Date(parseInt(t));return e.toLocaleDateString()+" | "+e.toLocaleTimeString("ru-RU")}static howTimePassed(t){let e=new Date(parseInt(t));return(new Date).getFullYear()-e.getFullYear()}static checkData(t){return t||""}}class e{constructor(){this.reg=/^[a-z]+([-_]?[a-z0-9]+){0,2}$/i,this.error=null}isValid(t,e){return""==t.value||""==e.value?(this.error="Заполните пустые поля!",!1):t.value.match(this.reg)?!(e.value.length<8)||(this.error="Пароль должен быть от 8 символов!",!1):(this.error="Логин имеет некоректный формат!",!1)}getAlertMsg(){return this.error}}class s{constructor(){this.url="http://localhost:3000/users/"}requestUserLoginData(t,e){return fetch(this.url).then(t=>t.json()).then(s=>{for(let i=0;i<s.length;i++)if(s[i].loginData.login==t&&s[i].loginData.password==e)return s[i];return s.loginData})}getLoginOptions(t,e){let s={login:t,pass:e};return{method:"post",headers:{"Content-type":"application/json; charset=utf-8"},body:JSON.stringify(s)}}getUserInfo(){return localStorage.getItem("userInfo")}saveUserData(t,e){let s={userId:e,isLogged:t};this.setUserInfo(s)}setUserInfo(t){localStorage.setItem("userInfo",JSON.stringify(t))}}class i{constructor(t,e,s,i){this.view=e,this.model=t,this.validator=i,this.utils=s,this.currentLogin=null,this.currentpass=null,this.userMenuSelector="#userMenu"}init(){this.view.init(),this.initListeners(),this.isLogged()&&this.logged()}initListeners(){this.view.goLoginBtn.addEventListener("click",this.goLogin.bind(this))}validateUserData(){this.validator.isValid(this.view.inputLogin,this.view.inputPass)?this.checkLoginData():this.view.showErrorMsg(this.validator.getAlertMsg())}checkLoginData(){let t=this.view.inputLogin.value,e=this.view.inputPass.value;this.model.requestUserLoginData(t,e).then(t=>{t?(this.model.saveUserData(!0,t.userId),this.logged()):this.view.showErrorMsg("Вы ввели несуществующий логин или неверный пароль!")})}goLogin(t){t.preventDefault(),this.view.hideErrorsMsg(),this.validateUserData()}logged(){document.location.href="",this.utils.hideView([this.userMenu])}logout(){this.model.saveUserData(!1),document.location.href="#login"}isLogged(){let t=this.model.getUserInfo();return t&&JSON.parse(t).isLogged}}class a{constructor(t){this.utils=t,this.template=document.querySelector("#login"),this.wrapper=document.querySelector("#wrapper"),this.inputLogin=document.querySelector(".input-login"),this.inputPass=document.querySelector(".input-pass"),this.errorDiv=document.querySelector(".alert"),this.goLoginBtn=document.querySelector(".goLogin"),this.logoutBtn=document.querySelector(".logout"),this.userMenu=document.querySelector("#userMenu")}init(){this.utils.hideView([this.userMenu])}showErrorMsg(t){this.errorDiv.innerHTML=t}hideErrorsMsg(){this.errorDiv.innerHTML=""}}let r=document.querySelector("#wrapper"),n=()=>{let t=localStorage.getItem("userInfo");return t&&JSON.parse(t).isLogged},l={"":{init:()=>{new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getPosts(this.user)}getMainUserInfo(t){return this.model.requestUserInfo(t).then(t=>{this.makeUserDataTemplate(t)})}makeUserDataTemplate(t){let e=this.view.photosTemplate(t.photos);this.template=this.model.makeUserData(this.template,e,t)}getPosts(t){let e="";this.model.requestDashboardPosts(t).then(t=>{t.forEach(t=>{this.model.requestUserInfo(t.userId).then(s=>{e+=this.view.postsTemplate(s.userInfo,this.utils.modifyDateandTime(t.date),t.text),this.view.printPostsAfterLoad(e)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(t=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"dashboard"),this.view.init()})}}(new class{constructor(t){this.url="http://localhost:3000/users/",this.utils=t}requestUserInfo(t){return fetch(this.url+t).then(t=>t.json()).then(t=>({userInfo:t.mainInfo,photos:t.photos}))}requestDashboardPosts(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.dashboardPosts)}makeUserData(t,e,s){return t.replace("{name}",s.userInfo.firstname+" "+s.userInfo.lastname).replace("{avatar}",this.utils.checkData(s.userInfo.avatar)).replace("{wallpaper}",this.utils.checkData(s.userInfo.wallpaper)).replace("{friends}",this.utils.checkData(s.userInfo.friends.length)).replace("{status}",this.utils.checkData(s.userInfo.status)).replace("{city}",this.utils.checkData(s.userInfo.contacts.city)).replace("{job}",this.utils.checkData(s.userInfo.job)).replace("{photos}",this.utils.checkData(e))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}(t),new class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#dashboard"),this.postsDivId="posts",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}printUserData(t){this.template.innerHTML=t}printPostsAfterLoad(t){document.querySelector("#"+this.postsDivId).innerHTML=t}postsTemplate(t,e,s){return`\n        <li class="rv b agz">\n            <img class="bos vb yb aff" src="${t.avatar}">\n            <div class="rw">\n                <div class="bpb">\n                    <small class="acx axc">${e}</small>\n                    <h6>${t.firstname} ${t.lastname}</h6>\n                </div>\n                <p>${s}</p>\n        </div>\n      </li>`}imagesTemplate(t){return`<div>${t}</div>`}photosTemplate(t){let e="";for(let s=0;s<2;s++)e+=`\n            <div class="fm">\n                <small>${t[s].title}</small>\n                <img src = ${t[s].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return e}}(t),t).init()},initied:!1},profile:{init:()=>{new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getFriendsInfo(this.user)}getMainUserInfo(t){return this.model.requestAllUserInfo(t).then(t=>{this.makeUserDataTemplate(t)})}makeUserDataTemplate(t){let e=this.view.languagesTemplate(t.otherInfo.languages),s=this.view.interestsTemplate(t.otherInfo.interests),i=this.view.photosTemplate(t.photos);this.template=this.model.makeUserData(this.template,t,s,e,i)}getFriendsInfo(t){let e="";this.model.requestFriends(t).then(t=>{t.forEach(t=>{this.model.requestAllUserInfo(t).then(t=>{e+=this.view.userTemplate(t.mainInfo),this.view.printFriendsAfterLoad(e)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(t=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"profile"),this.view.init()})}}(new class{constructor(t){this.utils=t,this.url="http://localhost:3000/users/"}requestAllUserInfo(t){return fetch(this.url+t).then(t=>t.json())}requestFriends(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.mainInfo.friends)}makeUserData(t,e,s,i,a){let r=` (${this.utils.howTimePassed(e.mainInfo.birthday)})`;return t.replace("{name}",e.mainInfo.firstname+" "+e.mainInfo.lastname).replace("{avatar}",this.utils.checkData(e.mainInfo.avatar)).replace("{wallpaper}",this.utils.checkData(e.mainInfo.wallpaper)).replace("{status}",this.utils.checkData(e.mainInfo.status)).replace("{birthday}",this.utils.modifyDate(e.mainInfo.birthday)+r).replace("{gender}",this.utils.checkData(e.mainInfo.gender)).replace("{job}",this.utils.checkData(e.mainInfo.job)).replace("{education}",this.utils.checkData(e.otherInfo.education)).replace("{email}",this.utils.checkData(e.mainInfo.contacts.email)).replace("{city}",this.utils.checkData(e.mainInfo.contacts.city)).replace("{telegram}",this.utils.checkData(e.mainInfo.contacts.telegram)).replace("{skype}",this.utils.checkData(e.mainInfo.contacts.skype)).replace("{about}",this.utils.checkData(e.otherInfo.about)).replace("{interests}",this.utils.checkData(s)).replace("{languages}",this.utils.checkData(i)).replace("{photos}",this.utils.checkData(a))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}(t),new class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#profile"),this.friendsDivId="friends",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}photosTemplate(t){for(let e=0;e<t.length;e++)photosTemplate+=`\n            <div class="fm">\n                <small>${t[e].title}</small>\n                <img src = ${t[e].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return""}userTemplate(t){return`<li class="b">\n            <div class="rv ady">\n                <img class="bos us aff" src="${t.avatar}">\n                <div class="rw yd">\n                    <button class="cg nz ok acx">\n                    <span class="h bju"></span> Unfollow\n                    </button>\n                    <strong>${t.firstname} ${t.lastname}</strong> |\n                    <small>${t.contacts.city}</small>\n                </div>\n            </div>\n      </li>`}printFriendsAfterLoad(t){document.querySelector("#"+this.friendsDivId).innerHTML=t}languagesTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`<li class="cg"><img width = "18" title=" ${t[s].title}" src ="${t[s].ico}"></li>`;return e}interestsTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`<li class="cg"><img width = "18" src ="${t[s].ico}"> ${t[s].title}</li>`;return e}photosTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`\n            <div style="width: 49%;margin-bottom: 10px;  display: inline-block; vertical-align: bottom;">\n            <h5>${t[s].title}</h5>\n            <img data-width="640" data-height="400" data-action="zoom" src="${t[s].url}" style="width: 405px; height: 254px;">\n          </div>\n            `;return e}printUserData(t){this.template.innerHTML=t}}(t),t).init()},initied:!1},login:{init:()=>{t.initTemplate(r,"login");let n=new s(t),l=new a(t),o=new e;new i(n,l,t,o).init()},initied:!1},logout:{init:()=>{t.initTemplate(r,"login");let n=new s(t),l=new a(t),o=new e;new i(n,l,t,o).logout()},initied:!1}};return function(){let t=document.location.hash.replace("#","");n()?l[t]&&(l[t].init(),l[t].initied=!0):l.login.init()}}();
var utils=function(){"use strict";return class{constructor(){}static showView(t){t.forEach(t=>{t.classList.remove("d-none")})}static hideView(t){t.forEach(function(t){t.classList.add("d-none")})}static navigateTo(t){window.location.hash="#"+t}static initTemplate(t,e){let a=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(a)}static modifyDate(t){return new Date(parseInt(t)).toLocaleDateString()}static modifyDateandTime(t){let e=new Date(parseInt(t));return e.toLocaleDateString()+" | "+e.toLocaleTimeString("ru-RU")}static howTimePassed(t){let e=new Date(parseInt(t));return(new Date).getFullYear()-e.getFullYear()}static checkData(t){return t||""}}}();
var validator=function(){"use strict";return class{constructor(){this.reg=/^[a-z]+([-_]?[a-z0-9]+){0,2}$/i,this.error=null}isValid(r,t){return""==r.value||""==t.value?(this.error="Заполните пустые поля!",!1):r.value.match(this.reg)?!(t.value.length<8&&(this.error="Пароль должен быть от 8 символов!",1)):(this.error="Логин имеет некоректный формат!",!1)}getAlertMsg(){return this.error}}}();
var dashboardController=function(){"use strict";return class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getPosts(this.user)}getMainUserInfo(t){return this.model.requestUserInfo(t).then(t=>{this.makeUserDataTemplate(t)})}makeUserDataTemplate(t){let e=this.view.photosTemplate(t.photos);this.template=this.model.makeUserData(this.template,e,t)}getPosts(t){let e="";this.model.requestDashboardPosts(t).then(t=>{t.forEach(t=>{this.model.requestUserInfo(t.userId).then(s=>{e+=this.view.postsTemplate(s.userInfo,this.utils.modifyDateandTime(t.date),t.text),this.view.printPostsAfterLoad(e)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(t=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"dashboard"),this.view.init()})}}}();
var dashboardModel=function(){"use strict";return class{constructor(t){this.url="http://localhost:3000/users/",this.utils=t}requestUserInfo(t){return fetch(this.url+t).then(t=>t.json()).then(t=>({userInfo:t.mainInfo,photos:t.photos}))}requestDashboardPosts(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.dashboardPosts)}makeUserData(t,e,s){return t.replace("{name}",s.userInfo.firstname+" "+s.userInfo.lastname).replace("{avatar}",this.utils.checkData(s.userInfo.avatar)).replace("{wallpaper}",this.utils.checkData(s.userInfo.wallpaper)).replace("{friends}",this.utils.checkData(s.userInfo.friends.length)).replace("{status}",this.utils.checkData(s.userInfo.status)).replace("{city}",this.utils.checkData(s.userInfo.contacts.city)).replace("{job}",this.utils.checkData(s.userInfo.job)).replace("{photos}",this.utils.checkData(e))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}}();
var dashboardView=function(){"use strict";return class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#dashboard"),this.postsDivId="posts",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}printUserData(t){this.template.innerHTML=t}printPostsAfterLoad(t){document.querySelector("#"+this.postsDivId).innerHTML=t}postsTemplate(t,s,e){return`\n        <li class="rv b agz">\n            <img class="bos vb yb aff" src="${t.avatar}">\n            <div class="rw">\n                <div class="bpb">\n                    <small class="acx axc">${s}</small>\n                    <h6>${t.firstname} ${t.lastname}</h6>\n                </div>\n                <p>${e}</p>\n        </div>\n      </li>`}imagesTemplate(t){return`<div>${t}</div>`}photosTemplate(t){let s="";for(let e=0;e<2;e++)s+=`\n            <div class="fm">\n                <small>${t[e].title}</small>\n                <img src = ${t[e].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return s}}}();
var loginController=function(){"use strict";return class{constructor(i,t,e,s){this.view=t,this.model=i,this.validator=s,this.utils=e,this.currentLogin=null,this.currentpass=null,this.userMenuSelector="#userMenu"}init(){this.view.init(),this.initListeners(),this.isLogged()&&this.logged()}initListeners(){this.view.goLoginBtn.addEventListener("click",this.goLogin.bind(this))}validateUserData(){this.validator.isValid(this.view.inputLogin,this.view.inputPass)?this.checkLoginData():this.view.showErrorMsg(this.validator.getAlertMsg())}checkLoginData(){let i=this.view.inputLogin.value,t=this.view.inputPass.value;this.model.requestUserLoginData(i,t).then(i=>{i?(this.model.saveUserData(!0,i.userId),this.logged()):this.view.showErrorMsg("Вы ввели несуществующий логин или неверный пароль!")})}goLogin(i){i.preventDefault(),this.view.hideErrorsMsg(),this.validateUserData()}logged(){document.location.href="",this.utils.hideView([this.userMenu])}logout(){this.model.saveUserData(!1),document.location.href="#login"}isLogged(){let i=this.model.getUserInfo();return i&&JSON.parse(i).isLogged}}}();
var loginModel=function(){"use strict";return class{constructor(){this.url="http://localhost:3000/users/"}requestUserLoginData(t,e){return fetch(this.url).then(t=>t.json()).then(s=>{for(let r=0;r<s.length;r++)if(s[r].loginData.login==t&&s[r].loginData.password==e)return s[r];return s.loginData})}getLoginOptions(t,e){let s={login:t,pass:e};return{method:"post",headers:{"Content-type":"application/json; charset=utf-8"},body:JSON.stringify(s)}}getUserInfo(){return localStorage.getItem("userInfo")}saveUserData(t,e){let s={userId:e,isLogged:t};this.setUserInfo(s)}setUserInfo(t){localStorage.setItem("userInfo",JSON.stringify(t))}}}();
var loginView=function(){"use strict";return class{constructor(e){this.utils=e,this.template=document.querySelector("#login"),this.wrapper=document.querySelector("#wrapper"),this.inputLogin=document.querySelector(".input-login"),this.inputPass=document.querySelector(".input-pass"),this.errorDiv=document.querySelector(".alert"),this.goLoginBtn=document.querySelector(".goLogin"),this.logoutBtn=document.querySelector(".logout"),this.userMenu=document.querySelector("#userMenu")}init(){this.utils.hideView([this.userMenu])}showErrorMsg(e){this.errorDiv.innerHTML=e}hideErrorsMsg(){this.errorDiv.innerHTML=""}}}();
var profileController=function(){"use strict";return class{constructor(e,t,s){this.model=e,this.view=t,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getFriendsInfo(this.user)}getMainUserInfo(e){return this.model.requestAllUserInfo(e).then(e=>{this.makeUserDataTemplate(e)})}makeUserDataTemplate(e){let t=this.view.languagesTemplate(e.otherInfo.languages),s=this.view.interestsTemplate(e.otherInfo.interests),i=this.view.photosTemplate(e.photos);this.template=this.model.makeUserData(this.template,e,s,t,i)}getFriendsInfo(e){let t="";this.model.requestFriends(e).then(e=>{e.forEach(e=>{this.model.requestAllUserInfo(e).then(e=>{t+=this.view.userTemplate(e.mainInfo),this.view.printFriendsAfterLoad(t)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(e=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"profile"),this.view.init()})}}}();
var profileModel=function(){"use strict";return class{constructor(t){this.utils=t,this.url="http://localhost:3000/users/"}requestAllUserInfo(t){return fetch(this.url+t).then(t=>t.json())}requestFriends(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.mainInfo.friends)}makeUserData(t,e,a,s,i){let c=` (${this.utils.howTimePassed(e.mainInfo.birthday)})`;return t.replace("{name}",e.mainInfo.firstname+" "+e.mainInfo.lastname).replace("{avatar}",this.utils.checkData(e.mainInfo.avatar)).replace("{wallpaper}",this.utils.checkData(e.mainInfo.wallpaper)).replace("{status}",this.utils.checkData(e.mainInfo.status)).replace("{birthday}",this.utils.modifyDate(e.mainInfo.birthday)+c).replace("{gender}",this.utils.checkData(e.mainInfo.gender)).replace("{job}",this.utils.checkData(e.mainInfo.job)).replace("{education}",this.utils.checkData(e.otherInfo.education)).replace("{email}",this.utils.checkData(e.mainInfo.contacts.email)).replace("{city}",this.utils.checkData(e.mainInfo.contacts.city)).replace("{telegram}",this.utils.checkData(e.mainInfo.contacts.telegram)).replace("{skype}",this.utils.checkData(e.mainInfo.contacts.skype)).replace("{about}",this.utils.checkData(e.otherInfo.about)).replace("{interests}",this.utils.checkData(a)).replace("{languages}",this.utils.checkData(s)).replace("{photos}",this.utils.checkData(i))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}}();
var profileView=function(){"use strict";return class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#profile"),this.friendsDivId="friends",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}photosTemplate(t){for(let e=0;e<t.length;e++)photosTemplate+=`\n            <div class="fm">\n                <small>${t[e].title}</small>\n                <img src = ${t[e].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return""}userTemplate(t){return`<li class="b">\n            <div class="rv ady">\n                <img class="bos us aff" src="${t.avatar}">\n                <div class="rw yd">\n                    <button class="cg nz ok acx">\n                    <span class="h bju"></span> Unfollow\n                    </button>\n                    <strong>${t.firstname} ${t.lastname}</strong> |\n                    <small>${t.contacts.city}</small>\n                </div>\n            </div>\n      </li>`}printFriendsAfterLoad(t){document.querySelector("#"+this.friendsDivId).innerHTML=t}languagesTemplate(t){let e="";for(let i=0;i<t.length;i++)e+=`<li class="cg"><img width = "18" title=" ${t[i].title}" src ="${t[i].ico}"></li>`;return e}interestsTemplate(t){let e="";for(let i=0;i<t.length;i++)e+=`<li class="cg"><img width = "18" src ="${t[i].ico}"> ${t[i].title}</li>`;return e}photosTemplate(t){let e="";for(let i=0;i<t.length;i++)e+=`\n            <div style="width: 49%;margin-bottom: 10px;  display: inline-block; vertical-align: bottom;">\n            <h5>${t[i].title}</h5>\n            <img data-width="640" data-height="400" data-action="zoom" src="${t[i].url}" style="width: 405px; height: 254px;">\n          </div>\n            `;return e}printUserData(t){this.template.innerHTML=t}}}();
!function(){"use strict";class t{constructor(){}static showView(t){t.forEach(t=>{t.classList.remove("d-none")})}static hideView(t){t.forEach(function(t){t.classList.add("d-none")})}static navigateTo(t){window.location.hash="#"+t}static initTemplate(t,e){let s=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(s)}static modifyDate(t){return new Date(parseInt(t)).toLocaleDateString()}static modifyDateandTime(t){let e=new Date(parseInt(t));return e.toLocaleDateString()+" | "+e.toLocaleTimeString("ru-RU")}static howTimePassed(t){let e=new Date(parseInt(t));return(new Date).getFullYear()-e.getFullYear()}static checkData(t){return t||""}}class e{constructor(){this.reg=/^[a-z]+([-_]?[a-z0-9]+){0,2}$/i,this.error=null}isValid(t,e){return""==t.value||""==e.value?(this.error="Заполните пустые поля!",!1):t.value.match(this.reg)?!(e.value.length<8)||(this.error="Пароль должен быть от 8 символов!",!1):(this.error="Логин имеет некоректный формат!",!1)}getAlertMsg(){return this.error}}class s{constructor(){this.url="http://localhost:3000/users/"}requestUserLoginData(t,e){return fetch(this.url).then(t=>t.json()).then(s=>{for(let i=0;i<s.length;i++)if(s[i].loginData.login==t&&s[i].loginData.password==e)return s[i];return s.loginData})}getLoginOptions(t,e){let s={login:t,pass:e};return{method:"post",headers:{"Content-type":"application/json; charset=utf-8"},body:JSON.stringify(s)}}getUserInfo(){return localStorage.getItem("userInfo")}saveUserData(t,e){let s={userId:e,isLogged:t};this.setUserInfo(s)}setUserInfo(t){localStorage.setItem("userInfo",JSON.stringify(t))}}class i{constructor(t,e,s,i){this.view=e,this.model=t,this.validator=i,this.utils=s,this.currentLogin=null,this.currentpass=null,this.userMenuSelector="#userMenu"}init(){this.view.init(),this.initListeners(),this.isLogged()&&this.logged()}initListeners(){this.view.goLoginBtn.addEventListener("click",this.goLogin.bind(this))}validateUserData(){this.validator.isValid(this.view.inputLogin,this.view.inputPass)?this.checkLoginData():this.view.showErrorMsg(this.validator.getAlertMsg())}checkLoginData(){let t=this.view.inputLogin.value,e=this.view.inputPass.value;this.model.requestUserLoginData(t,e).then(t=>{t?(this.model.saveUserData(!0,t.userId),this.logged()):this.view.showErrorMsg("Вы ввели несуществующий логин или неверный пароль!")})}goLogin(t){t.preventDefault(),this.view.hideErrorsMsg(),this.validateUserData()}logged(){document.location.href="",this.utils.hideView([this.userMenu])}logout(){this.model.saveUserData(!1),document.location.href="#login"}isLogged(){let t=this.model.getUserInfo();return t&&JSON.parse(t).isLogged}}class a{constructor(t){this.utils=t,this.template=document.querySelector("#login"),this.wrapper=document.querySelector("#wrapper"),this.inputLogin=document.querySelector(".input-login"),this.inputPass=document.querySelector(".input-pass"),this.errorDiv=document.querySelector(".alert"),this.goLoginBtn=document.querySelector(".goLogin"),this.logoutBtn=document.querySelector(".logout"),this.userMenu=document.querySelector("#userMenu")}init(){this.utils.hideView([this.userMenu])}showErrorMsg(t){this.errorDiv.innerHTML=t}hideErrorsMsg(){this.errorDiv.innerHTML=""}}let r=document.querySelector("#wrapper"),n=()=>{let t=localStorage.getItem("userInfo");return t&&JSON.parse(t).isLogged},l={"":{init:()=>{new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getPosts(this.user)}getMainUserInfo(t){return this.model.requestUserInfo(t).then(t=>{this.makeUserDataTemplate(t)})}makeUserDataTemplate(t){let e=this.view.photosTemplate(t.photos);this.template=this.model.makeUserData(this.template,e,t)}getPosts(t){let e="";this.model.requestDashboardPosts(t).then(t=>{t.forEach(t=>{this.model.requestUserInfo(t.userId).then(s=>{e+=this.view.postsTemplate(s.userInfo,this.utils.modifyDateandTime(t.date),t.text),this.view.printPostsAfterLoad(e)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(t=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"dashboard"),this.view.init()})}}(new class{constructor(t){this.url="http://localhost:3000/users/",this.utils=t}requestUserInfo(t){return fetch(this.url+t).then(t=>t.json()).then(t=>({userInfo:t.mainInfo,photos:t.photos}))}requestDashboardPosts(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.dashboardPosts)}makeUserData(t,e,s){return t.replace("{name}",s.userInfo.firstname+" "+s.userInfo.lastname).replace("{avatar}",this.utils.checkData(s.userInfo.avatar)).replace("{wallpaper}",this.utils.checkData(s.userInfo.wallpaper)).replace("{friends}",this.utils.checkData(s.userInfo.friends.length)).replace("{status}",this.utils.checkData(s.userInfo.status)).replace("{city}",this.utils.checkData(s.userInfo.contacts.city)).replace("{job}",this.utils.checkData(s.userInfo.job)).replace("{photos}",this.utils.checkData(e))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}(t),new class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#dashboard"),this.postsDivId="posts",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}printUserData(t){this.template.innerHTML=t}printPostsAfterLoad(t){document.querySelector("#"+this.postsDivId).innerHTML=t}postsTemplate(t,e,s){return`\n        <li class="rv b agz">\n            <img class="bos vb yb aff" src="${t.avatar}">\n            <div class="rw">\n                <div class="bpb">\n                    <small class="acx axc">${e}</small>\n                    <h6>${t.firstname} ${t.lastname}</h6>\n                </div>\n                <p>${s}</p>\n        </div>\n      </li>`}imagesTemplate(t){return`<div>${t}</div>`}photosTemplate(t){let e="";for(let s=0;s<2;s++)e+=`\n            <div class="fm">\n                <small>${t[s].title}</small>\n                <img src = ${t[s].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return e}}(t),t).init()},initied:!1},profile:{init:()=>{new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.user=null,this.template=this.view.template.innerHTML}async getAllData(){await this.getMainUserInfo(this.user),await this.getFriendsInfo(this.user)}getMainUserInfo(t){return this.model.requestAllUserInfo(t).then(t=>{this.makeUserDataTemplate(t)})}makeUserDataTemplate(t){let e=this.view.languagesTemplate(t.otherInfo.languages),s=this.view.interestsTemplate(t.otherInfo.interests),i=this.view.photosTemplate(t.photos);this.template=this.model.makeUserData(this.template,t,s,e,i)}getFriendsInfo(t){let e="";this.model.requestFriends(t).then(t=>{t.forEach(t=>{this.model.requestAllUserInfo(t).then(t=>{e+=this.view.userTemplate(t.mainInfo),this.view.printFriendsAfterLoad(e)})})})}init(){this.user=this.model.getCurrentUser(),this.getAllData().then(t=>{this.view.printUserData(this.template),this.utils.initTemplate(this.view.wrapper,"profile"),this.view.init()})}}(new class{constructor(t){this.utils=t,this.url="http://localhost:3000/users/"}requestAllUserInfo(t){return fetch(this.url+t).then(t=>t.json())}requestFriends(t){return fetch(this.url+t).then(t=>t.json()).then(t=>t.mainInfo.friends)}makeUserData(t,e,s,i,a){let r=` (${this.utils.howTimePassed(e.mainInfo.birthday)})`;return t.replace("{name}",e.mainInfo.firstname+" "+e.mainInfo.lastname).replace("{avatar}",this.utils.checkData(e.mainInfo.avatar)).replace("{wallpaper}",this.utils.checkData(e.mainInfo.wallpaper)).replace("{status}",this.utils.checkData(e.mainInfo.status)).replace("{birthday}",this.utils.modifyDate(e.mainInfo.birthday)+r).replace("{gender}",this.utils.checkData(e.mainInfo.gender)).replace("{job}",this.utils.checkData(e.mainInfo.job)).replace("{education}",this.utils.checkData(e.otherInfo.education)).replace("{email}",this.utils.checkData(e.mainInfo.contacts.email)).replace("{city}",this.utils.checkData(e.mainInfo.contacts.city)).replace("{telegram}",this.utils.checkData(e.mainInfo.contacts.telegram)).replace("{skype}",this.utils.checkData(e.mainInfo.contacts.skype)).replace("{about}",this.utils.checkData(e.otherInfo.about)).replace("{interests}",this.utils.checkData(s)).replace("{languages}",this.utils.checkData(i)).replace("{photos}",this.utils.checkData(a))}getCurrentUser(){return JSON.parse(localStorage.getItem("userInfo")).userId}}(t),new class{constructor(t){this.utils=t,this.wrapper=document.querySelector("#wrapper"),this.template=document.querySelector("#profile"),this.friendsDivId="friends",this.userMenu=document.querySelector("#userMenu")}init(){this.utils.showView([this.userMenu])}photosTemplate(t){for(let e=0;e<t.length;e++)photosTemplate+=`\n            <div class="fm">\n                <small>${t[e].title}</small>\n                <img src = ${t[e].url} data-width="640" data-height="640" data-action="zoom">\n            </div>\n            `;return""}userTemplate(t){return`<li class="b">\n            <div class="rv ady">\n                <img class="bos us aff" src="${t.avatar}">\n                <div class="rw yd">\n                    <button class="cg nz ok acx">\n                    <span class="h bju"></span> Unfollow\n                    </button>\n                    <strong>${t.firstname} ${t.lastname}</strong> |\n                    <small>${t.contacts.city}</small>\n                </div>\n            </div>\n      </li>`}printFriendsAfterLoad(t){document.querySelector("#"+this.friendsDivId).innerHTML=t}languagesTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`<li class="cg"><img width = "18" title=" ${t[s].title}" src ="${t[s].ico}"></li>`;return e}interestsTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`<li class="cg"><img width = "18" src ="${t[s].ico}"> ${t[s].title}</li>`;return e}photosTemplate(t){let e="";for(let s=0;s<t.length;s++)e+=`\n            <div style="width: 49%;margin-bottom: 10px;  display: inline-block; vertical-align: bottom;">\n            <h5>${t[s].title}</h5>\n            <img data-width="640" data-height="400" data-action="zoom" src="${t[s].url}" style="width: 405px; height: 254px;">\n          </div>\n            `;return e}printUserData(t){this.template.innerHTML=t}}(t),t).init()},initied:!1},login:{init:()=>{t.initTemplate(r,"login");let n=new s(t),l=new a(t),o=new e;new i(n,l,t,o).init()},initied:!1},logout:{init:()=>{t.initTemplate(r,"login");let n=new s(t),l=new a(t),o=new e;new i(n,l,t,o).logout()},initied:!1}};function o(){let t=document.location.hash.replace("#","");n()?l[t]&&(l[t].init(),l[t].initied=!0):l.login.init()}window.addEventListener("load",o),window.addEventListener("hashchange",o)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
